from hub import port
from hub import motion_sensor
import runloop
import motor
import motor_pair
import color_sensor
import color
import time

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
#motion_sensor.set_yaw_face(motion_sensor.FRONT)
#motion_sensor.reset_yaw_angle(0)
color_sensor.color(port.E)
color_sensor.reflection(port.E)
color_sensor.color(port.F)
color_sensor.reflection(port.F)

def move_G(rotation_G,degree_G,Speed_G,acceleration_G):
    change = 0
    old_change = 0
    integral = 0
    steeringSum = 0

    pRegler=3
    iRegler=1
    dRegler=0
    #a=0

    gyroStartValue= degree_G

    motor.reset_relative_position(port.B,0)
    while motor.relative_position(port.B)/360 < rotation_G:

        change = gyroStartValue + motion_sensor.tilt_angles()[0]/10
        currenSteering = (change * pRegler + integral * iRegler + dRegler * (change - old_change))
        currenSteering = max(-100, min(currenSteering, 100))

        steeringSum += change
        integral += change - old_change
        old_change = change

        motor_pair.move(motor_pair.PAIR_1, int(currenSteering), velocity = Speed_G, acceleration = acceleration_G)

        #if motion_sensor.tilt_angles()[0]/10 > a:
            #a=motion_sensor.tilt_angles()[0]/10
        #print(a)
    motor_pair.stop(motor_pair.PAIR_1)
    time.sleep(0.5)

def turn_G(de):
    if de > 0:
        while motion_sensor.tilt_angles()[0]/10 > -(de-2):
            motor_pair.move(motor_pair.PAIR_1, 100, velocity = 100, acceleration = 100)
        motor_pair.stop(motor_pair.PAIR_1)
    else:
        while motion_sensor.tilt_angles()[0]/10 < -(de+2):
            motor_pair.move(motor_pair.PAIR_1, -100, velocity = 100, acceleration = 100)
        motor_pair.stop(motor_pair.PAIR_1)
    time.sleep(0.5)

async def main():

    move_G(3.5,0,500,300)
    while color_sensor.color(port.E) is not color.BLACK:
        motor_pair.move(motor_pair.PAIR_1, 0, velocity = 100, acceleration = 300)
    motor_pair.stop(motor_pair.PAIR_1)
    time.sleep(0.5)
    move_G(0.2,0,100,300)
    turn_G(-45)

    n=0
    while n<3:
        move_G(1,-45,800,1000)
        while color_sensor.color(port.E) is not color.BLACK:
            motor_pair.move(motor_pair.PAIR_1, 0, velocity = -100, acceleration = 300)
        motor_pair.stop(motor_pair.PAIR_1)
        n=1+n
    time.sleep(0.5)

    turn_G(90)

    move_G(2.6,90,500,300)
    turn_G(0)
    move_G(3,0,800,1000)
    #while color_sensor.color(port.E) is not color.WHITE:
    #        motor_pair.move(motor_pair.PAIR_1, 0, velocity = -100, acceleration = 300)
    #motor_pair.stop(motor_pair.PAIR_1)
    #time.sleep(0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 200,0, velocity = -100, acceleration = 300)
    time.sleep(0.5)

    turn_G(75)
    move_G(1.8,75,500,300)
    while color_sensor.reflection(port.F) < 80:
        motor_pair.move(motor_pair.PAIR_1, 0, velocity = -100, acceleration = 300)
    motor_pair.stop(motor_pair.PAIR_1)

    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 200,0, velocity = 100, acceleration = 300)
    motor_pair.stop(motor_pair.PAIR_1)

    await motor.run_for_time(port.C,2000,100)

    turn_G(125)

    move_G(1,125,100,300)
    turn_G(90)
    move_G(1,90,100,300)

    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 5*360,8, velocity = 800, acceleration = 1000)

    '''
    move_G(1,0,100)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 180,0, velocity = -100, acceleration = 300)
    motor_pair.stop(motor_pair.PAIR_1)
    time.sleep(0.5)
    turn_G(90)
    move_G(5,90,500)
    turn_G(135)
    move_G(4,135,500)
'''
    
runloop.run(main())
